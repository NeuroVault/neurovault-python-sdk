# coding: utf-8

"""
    Neurovault API

    All ur images r belong to us  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from neurovault_sdk import schemas  # noqa: F401


class Atlas(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "collection_id",
            "add_date",
            "file",
            "name",
            "collection",
            "id",
            "modify_date",
            "file_size",
            "url",
            "label_description_file",
        }
        
        class properties:
            url = schemas.StrSchema
            id = schemas.IntSchema
            file = schemas.StrSchema
            collection = schemas.StrSchema
            collection_id = schemas.IntSchema
            file_size = schemas.IntSchema
            label_description_file = schemas.StrSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            add_date = schemas.DateTimeSchema
            modify_date = schemas.DateTimeSchema
            description = schemas.StrSchema
            is_valid = schemas.BoolSchema
            
            
            class surface_left_file(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'surface_left_file':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class surface_right_file(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'surface_right_file':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class data_origin(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            DataOriginEnum,
                            BlankEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data_origin':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class target_template_image(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TargetTemplateImageEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'target_template_image':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class subject_species(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subject_species':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class figure(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'figure':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class handedness(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            AtlasHandednessEnum,
                            BlankEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'handedness':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class age(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'age':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class gender(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            GenderEnum,
                            BlankEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'gender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class race(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            RaceEnum,
                            BlankEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'race':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class ethnicity(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            EthnicityEnum,
                            BlankEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'ethnicity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class BMI(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'BMI':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fat_percentage(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fat_percentage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class waist_hip_ratio(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'waist_hip_ratio':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class mean_PDS_score(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mean_PDS_score':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class tanner_stage(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            TannerStageEnum,
                            BlankEnum,
                            NullEnum,
                        ]
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'tanner_stage':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class days_since_menstruation(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'days_since_menstruation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class hours_since_last_meal(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hours_since_last_meal':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bis_bas_score(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bis_bas_score':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class spsrq_score(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'spsrq_score':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class bis11_score(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bis11_score':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class thumbnail(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'thumbnail':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class reduced_representation(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'uri'
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reduced_representation':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "url": url,
                "id": id,
                "file": file,
                "collection": collection,
                "collection_id": collection_id,
                "file_size": file_size,
                "label_description_file": label_description_file,
                "name": name,
                "add_date": add_date,
                "modify_date": modify_date,
                "description": description,
                "is_valid": is_valid,
                "surface_left_file": surface_left_file,
                "surface_right_file": surface_right_file,
                "data_origin": data_origin,
                "target_template_image": target_template_image,
                "subject_species": subject_species,
                "figure": figure,
                "handedness": handedness,
                "age": age,
                "gender": gender,
                "race": race,
                "ethnicity": ethnicity,
                "BMI": BMI,
                "fat_percentage": fat_percentage,
                "waist_hip_ratio": waist_hip_ratio,
                "mean_PDS_score": mean_PDS_score,
                "tanner_stage": tanner_stage,
                "days_since_menstruation": days_since_menstruation,
                "hours_since_last_meal": hours_since_last_meal,
                "bis_bas_score": bis_bas_score,
                "spsrq_score": spsrq_score,
                "bis11_score": bis11_score,
                "thumbnail": thumbnail,
                "reduced_representation": reduced_representation,
                "data": data,
            }
    
    collection_id: MetaOapg.properties.collection_id
    add_date: MetaOapg.properties.add_date
    file: MetaOapg.properties.file
    name: MetaOapg.properties.name
    collection: MetaOapg.properties.collection
    id: MetaOapg.properties.id
    modify_date: MetaOapg.properties.modify_date
    file_size: MetaOapg.properties.file_size
    url: MetaOapg.properties.url
    label_description_file: MetaOapg.properties.label_description_file
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_size"]) -> MetaOapg.properties.file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label_description_file"]) -> MetaOapg.properties.label_description_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_date"]) -> MetaOapg.properties.add_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modify_date"]) -> MetaOapg.properties.modify_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_valid"]) -> MetaOapg.properties.is_valid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surface_left_file"]) -> MetaOapg.properties.surface_left_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["surface_right_file"]) -> MetaOapg.properties.surface_right_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_origin"]) -> MetaOapg.properties.data_origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["target_template_image"]) -> MetaOapg.properties.target_template_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject_species"]) -> MetaOapg.properties.subject_species: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["figure"]) -> MetaOapg.properties.figure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["handedness"]) -> MetaOapg.properties.handedness: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["age"]) -> MetaOapg.properties.age: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["race"]) -> MetaOapg.properties.race: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicity"]) -> MetaOapg.properties.ethnicity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["BMI"]) -> MetaOapg.properties.BMI: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fat_percentage"]) -> MetaOapg.properties.fat_percentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["waist_hip_ratio"]) -> MetaOapg.properties.waist_hip_ratio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mean_PDS_score"]) -> MetaOapg.properties.mean_PDS_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tanner_stage"]) -> MetaOapg.properties.tanner_stage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["days_since_menstruation"]) -> MetaOapg.properties.days_since_menstruation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hours_since_last_meal"]) -> MetaOapg.properties.hours_since_last_meal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bis_bas_score"]) -> MetaOapg.properties.bis_bas_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spsrq_score"]) -> MetaOapg.properties.spsrq_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bis11_score"]) -> MetaOapg.properties.bis11_score: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> MetaOapg.properties.thumbnail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reduced_representation"]) -> MetaOapg.properties.reduced_representation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["url", "id", "file", "collection", "collection_id", "file_size", "label_description_file", "name", "add_date", "modify_date", "description", "is_valid", "surface_left_file", "surface_right_file", "data_origin", "target_template_image", "subject_species", "figure", "handedness", "age", "gender", "race", "ethnicity", "BMI", "fat_percentage", "waist_hip_ratio", "mean_PDS_score", "tanner_stage", "days_since_menstruation", "hours_since_last_meal", "bis_bas_score", "spsrq_score", "bis11_score", "thumbnail", "reduced_representation", "data", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> MetaOapg.properties.file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection_id"]) -> MetaOapg.properties.collection_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_size"]) -> MetaOapg.properties.file_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label_description_file"]) -> MetaOapg.properties.label_description_file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_date"]) -> MetaOapg.properties.add_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modify_date"]) -> MetaOapg.properties.modify_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_valid"]) -> typing.Union[MetaOapg.properties.is_valid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surface_left_file"]) -> typing.Union[MetaOapg.properties.surface_left_file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["surface_right_file"]) -> typing.Union[MetaOapg.properties.surface_right_file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_origin"]) -> typing.Union[MetaOapg.properties.data_origin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["target_template_image"]) -> typing.Union[MetaOapg.properties.target_template_image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject_species"]) -> typing.Union[MetaOapg.properties.subject_species, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["figure"]) -> typing.Union[MetaOapg.properties.figure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["handedness"]) -> typing.Union[MetaOapg.properties.handedness, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["age"]) -> typing.Union[MetaOapg.properties.age, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> typing.Union[MetaOapg.properties.gender, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["race"]) -> typing.Union[MetaOapg.properties.race, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicity"]) -> typing.Union[MetaOapg.properties.ethnicity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["BMI"]) -> typing.Union[MetaOapg.properties.BMI, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fat_percentage"]) -> typing.Union[MetaOapg.properties.fat_percentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["waist_hip_ratio"]) -> typing.Union[MetaOapg.properties.waist_hip_ratio, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mean_PDS_score"]) -> typing.Union[MetaOapg.properties.mean_PDS_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tanner_stage"]) -> typing.Union[MetaOapg.properties.tanner_stage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["days_since_menstruation"]) -> typing.Union[MetaOapg.properties.days_since_menstruation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hours_since_last_meal"]) -> typing.Union[MetaOapg.properties.hours_since_last_meal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bis_bas_score"]) -> typing.Union[MetaOapg.properties.bis_bas_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spsrq_score"]) -> typing.Union[MetaOapg.properties.spsrq_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bis11_score"]) -> typing.Union[MetaOapg.properties.bis11_score, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> typing.Union[MetaOapg.properties.thumbnail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reduced_representation"]) -> typing.Union[MetaOapg.properties.reduced_representation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["url", "id", "file", "collection", "collection_id", "file_size", "label_description_file", "name", "add_date", "modify_date", "description", "is_valid", "surface_left_file", "surface_right_file", "data_origin", "target_template_image", "subject_species", "figure", "handedness", "age", "gender", "race", "ethnicity", "BMI", "fat_percentage", "waist_hip_ratio", "mean_PDS_score", "tanner_stage", "days_since_menstruation", "hours_since_last_meal", "bis_bas_score", "spsrq_score", "bis11_score", "thumbnail", "reduced_representation", "data", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        collection_id: typing.Union[MetaOapg.properties.collection_id, decimal.Decimal, int, ],
        add_date: typing.Union[MetaOapg.properties.add_date, str, datetime, ],
        file: typing.Union[MetaOapg.properties.file, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        collection: typing.Union[MetaOapg.properties.collection, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        modify_date: typing.Union[MetaOapg.properties.modify_date, str, datetime, ],
        file_size: typing.Union[MetaOapg.properties.file_size, decimal.Decimal, int, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        label_description_file: typing.Union[MetaOapg.properties.label_description_file, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        is_valid: typing.Union[MetaOapg.properties.is_valid, bool, schemas.Unset] = schemas.unset,
        surface_left_file: typing.Union[MetaOapg.properties.surface_left_file, None, str, schemas.Unset] = schemas.unset,
        surface_right_file: typing.Union[MetaOapg.properties.surface_right_file, None, str, schemas.Unset] = schemas.unset,
        data_origin: typing.Union[MetaOapg.properties.data_origin, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        target_template_image: typing.Union[MetaOapg.properties.target_template_image, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        subject_species: typing.Union[MetaOapg.properties.subject_species, None, str, schemas.Unset] = schemas.unset,
        figure: typing.Union[MetaOapg.properties.figure, None, str, schemas.Unset] = schemas.unset,
        handedness: typing.Union[MetaOapg.properties.handedness, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        age: typing.Union[MetaOapg.properties.age, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        gender: typing.Union[MetaOapg.properties.gender, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        race: typing.Union[MetaOapg.properties.race, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        ethnicity: typing.Union[MetaOapg.properties.ethnicity, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        BMI: typing.Union[MetaOapg.properties.BMI, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        fat_percentage: typing.Union[MetaOapg.properties.fat_percentage, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        waist_hip_ratio: typing.Union[MetaOapg.properties.waist_hip_ratio, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        mean_PDS_score: typing.Union[MetaOapg.properties.mean_PDS_score, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        tanner_stage: typing.Union[MetaOapg.properties.tanner_stage, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        days_since_menstruation: typing.Union[MetaOapg.properties.days_since_menstruation, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        hours_since_last_meal: typing.Union[MetaOapg.properties.hours_since_last_meal, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bis_bas_score: typing.Union[MetaOapg.properties.bis_bas_score, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        spsrq_score: typing.Union[MetaOapg.properties.spsrq_score, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        bis11_score: typing.Union[MetaOapg.properties.bis11_score, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        thumbnail: typing.Union[MetaOapg.properties.thumbnail, None, str, schemas.Unset] = schemas.unset,
        reduced_representation: typing.Union[MetaOapg.properties.reduced_representation, None, str, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Atlas':
        return super().__new__(
            cls,
            *args,
            collection_id=collection_id,
            add_date=add_date,
            file=file,
            name=name,
            collection=collection,
            id=id,
            modify_date=modify_date,
            file_size=file_size,
            url=url,
            label_description_file=label_description_file,
            description=description,
            is_valid=is_valid,
            surface_left_file=surface_left_file,
            surface_right_file=surface_right_file,
            data_origin=data_origin,
            target_template_image=target_template_image,
            subject_species=subject_species,
            figure=figure,
            handedness=handedness,
            age=age,
            gender=gender,
            race=race,
            ethnicity=ethnicity,
            BMI=BMI,
            fat_percentage=fat_percentage,
            waist_hip_ratio=waist_hip_ratio,
            mean_PDS_score=mean_PDS_score,
            tanner_stage=tanner_stage,
            days_since_menstruation=days_since_menstruation,
            hours_since_last_meal=hours_since_last_meal,
            bis_bas_score=bis_bas_score,
            spsrq_score=spsrq_score,
            bis11_score=bis11_score,
            thumbnail=thumbnail,
            reduced_representation=reduced_representation,
            data=data,
            _configuration=_configuration,
            **kwargs,
        )

from neurovault_sdk.model.atlas_handedness_enum import AtlasHandednessEnum
from neurovault_sdk.model.blank_enum import BlankEnum
from neurovault_sdk.model.data_origin_enum import DataOriginEnum
from neurovault_sdk.model.ethnicity_enum import EthnicityEnum
from neurovault_sdk.model.gender_enum import GenderEnum
from neurovault_sdk.model.null_enum import NullEnum
from neurovault_sdk.model.race_enum import RaceEnum
from neurovault_sdk.model.tanner_stage_enum import TannerStageEnum
from neurovault_sdk.model.target_template_image_enum import TargetTemplateImageEnum
