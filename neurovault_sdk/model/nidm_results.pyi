# coding: utf-8

"""
    Neurovault API

    All ur images r belong to us  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from neurovault_sdk import schemas  # noqa: F401


class NIDMResults(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "add_date",
            "name",
            "collection",
            "id",
            "modify_date",
            "zip_file",
            "statmaps",
            "url",
        }
        
        class properties:
            id = schemas.IntSchema
            zip_file = schemas.StrSchema
            
            
            class statmaps(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Image']:
                        return Image
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Image'], typing.List['Image']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'statmaps':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Image':
                    return super().__getitem__(i)
            url = schemas.StrSchema
            collection = schemas.IntSchema
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            add_date = schemas.DateTimeSchema
            modify_date = schemas.DateTimeSchema
            ttl_file = schemas.StrSchema
            description = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "zip_file": zip_file,
                "statmaps": statmaps,
                "url": url,
                "collection": collection,
                "name": name,
                "add_date": add_date,
                "modify_date": modify_date,
                "ttl_file": ttl_file,
                "description": description,
            }
    
    add_date: MetaOapg.properties.add_date
    name: MetaOapg.properties.name
    collection: MetaOapg.properties.collection
    id: MetaOapg.properties.id
    modify_date: MetaOapg.properties.modify_date
    zip_file: MetaOapg.properties.zip_file
    statmaps: MetaOapg.properties.statmaps
    url: MetaOapg.properties.url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zip_file"]) -> MetaOapg.properties.zip_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statmaps"]) -> MetaOapg.properties.statmaps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_date"]) -> MetaOapg.properties.add_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modify_date"]) -> MetaOapg.properties.modify_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttl_file"]) -> MetaOapg.properties.ttl_file: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "zip_file", "statmaps", "url", "collection", "name", "add_date", "modify_date", "ttl_file", "description", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zip_file"]) -> MetaOapg.properties.zip_file: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statmaps"]) -> MetaOapg.properties.statmaps: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collection"]) -> MetaOapg.properties.collection: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_date"]) -> MetaOapg.properties.add_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modify_date"]) -> MetaOapg.properties.modify_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttl_file"]) -> typing.Union[MetaOapg.properties.ttl_file, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "zip_file", "statmaps", "url", "collection", "name", "add_date", "modify_date", "ttl_file", "description", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        add_date: typing.Union[MetaOapg.properties.add_date, str, datetime, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        collection: typing.Union[MetaOapg.properties.collection, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        modify_date: typing.Union[MetaOapg.properties.modify_date, str, datetime, ],
        zip_file: typing.Union[MetaOapg.properties.zip_file, str, ],
        statmaps: typing.Union[MetaOapg.properties.statmaps, list, tuple, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        ttl_file: typing.Union[MetaOapg.properties.ttl_file, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NIDMResults':
        return super().__new__(
            cls,
            *args,
            add_date=add_date,
            name=name,
            collection=collection,
            id=id,
            modify_date=modify_date,
            zip_file=zip_file,
            statmaps=statmaps,
            url=url,
            ttl_file=ttl_file,
            description=description,
            _configuration=_configuration,
            **kwargs,
        )

from neurovault_sdk.model.image import Image
